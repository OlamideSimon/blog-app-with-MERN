{"ast":null,"code":"var _jsxFileName = \"/home/young-alpha/Documents/GitHub/saadatu-backend/frontend/src/components/Comments.tsx\",\n    _s = $RefreshSig$();\n\nimport { Avatar } from '@mui/material';\nimport React, { useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport { getComment, reset } from '../features/comments/commentSlice';\nimport Spinner from './Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Comments = _ref => {\n  _s();\n\n  let {\n    id\n  } = _ref;\n  const dispatch = useAppDispatch();\n  const {\n    comments,\n    isLoading,\n    isError,\n    message\n  } = useAppSelector(state => state.comments);\n  useEffect(() => {});\n  useEffect(() => {\n    if (isError) {\n      toast.error(message);\n    }\n\n    dispatch(getComment(id));\n    return () => {\n      dispatch(reset());\n    };\n  }, [id, dispatch, isError, message]);\n  isLoading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 18\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), comments.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-5 md:px-10\",\n      children: comments.map(comment => {\n        var _comment$name;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2 w-36 text-sm\",\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              sx: {\n                backgroundColor: \"#b6fff4\",\n                color: \"black\"\n              },\n              children: comment === null || comment === void 0 ? void 0 : (_comment$name = comment.name) === null || _comment$name === void 0 ? void 0 : _comment$name.charAt(0)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-full\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"truncate\",\n                children: comment === null || comment === void 0 ? void 0 : comment.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-xs truncate\",\n                children: new Date(comment === null || comment === void 0 ? void 0 : comment.createdAt).toUTCString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"\",\n              children: comment === null || comment === void 0 ? void 0 : comment.comment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this)]\n        }, comment === null || comment === void 0 ? void 0 : comment._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Be the first to comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Comments, \"ww6vsNEb9j6Hu+EXfZTU6hkV1OY=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/home/young-alpha/Documents/GitHub/saadatu-backend/frontend/src/components/Comments.tsx"],"names":["Avatar","React","useEffect","toast","useAppDispatch","useAppSelector","getComment","reset","Spinner","Comments","id","dispatch","comments","isLoading","isError","message","state","error","length","map","comment","backgroundColor","color","name","charAt","Date","createdAt","toUTCString","_id"],"mappings":"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","sourcesContent":["import { Avatar } from '@mui/material';\nimport React, { useEffect } from 'react'\nimport { toast } from 'react-toastify';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport { getComment, reset } from '../features/comments/commentSlice';\nimport Spinner from './Spinner';\n\nconst Comments = ({id}: any) => {\n    const dispatch = useAppDispatch();\n    const { comments, isLoading, isError, message } = useAppSelector(\n        (state) => state.comments\n    );\n\n    useEffect(() => {})\n\n    useEffect(() => {\n    if (isError) {\n        toast.error(message);\n    }\n\n    dispatch(getComment(id));\n\n    return () => {\n        dispatch(reset());\n    };\n    }, [id, dispatch, isError, message]);\n\n    isLoading && <Spinner />;\n\n  return (\n      <>\n      <Spinner />\n        {comments.length > 0 ? (\n        <div className=\"px-5 md:px-10\">\n            {comments.map((comment: any) => (\n            <div key={comment?._id} className=\"p-3\">\n                <div className=\"flex items-center space-x-2 w-36 text-sm\">\n                <Avatar sx={{ backgroundColor: \"#b6fff4\", color: \"black\" }}>\n                    {comment?.name?.charAt(0)}\n                </Avatar>\n                <div className=\"w-full\">\n                    <h1 className=\"truncate\">{comment?.name}</h1>\n                    <p className=\"text-xs truncate\">\n                    {new Date(comment?.createdAt).toUTCString()}\n                    </p>\n                </div>\n                </div>\n                <div className=\"p-2\">\n                <p className=\"\">{comment?.comment}</p>\n                </div>\n            </div>\n            ))}\n        </div>\n        ) : (\n        <div>\n            <p>Be the first to comment</p>\n        </div>\n        )}\n      </>\n  )\n}\n\nexport default Comments"]},"metadata":{},"sourceType":"module"}