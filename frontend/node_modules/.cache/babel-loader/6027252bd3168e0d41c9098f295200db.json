{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport blogService from './blogService';\nconst initialState = {\n  blogs: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const getBlog = createAsyncThunk('api/goals', async (_, thunkAPI) => {\n  try {\n    return await blogService.getBlogs();\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const blogSlice = createSlice({\n  name: 'blogs',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(getBlog.pending, state => {\n      state.isLoading = true;\n    }).addCase(getBlog.fulfilled, (state, action) => {\n      state.blogs = action.payload;\n      state.isLoading = false;\n      state.isSuccess = true;\n    }).addCase(getBlog.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = blogSlice.actions;\nexport default blogSlice.reducer;","map":{"version":3,"sources":["/home/young-alpha/Documents/GitHub/saadatu-backend/frontend/src/features/blogs/blogSlice.ts"],"names":["createAsyncThunk","createSlice","blogService","initialState","blogs","isError","isSuccess","isLoading","message","getBlog","_","thunkAPI","getBlogs","error","response","data","toString","rejectWithValue","blogSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,YAAmB,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,OAAO,EAAE,KAFe;AAGxBC,EAAAA,SAAS,EAAE,KAHa;AAIxBC,EAAAA,SAAS,EAAE,KAJa;AAKxBC,EAAAA,OAAO,EAAE;AALe,CAA5B;AAQA,OAAO,MAAMC,OAAO,GAAGT,gBAAgB,CAAC,WAAD,EAAc,OAAMU,CAAN,EAASC,QAAT,KAAsB;AACvE,MAAI;AACA,WAAO,MAAMT,WAAW,CAACU,QAAZ,EAAb;AACH,GAFD,CAEE,OAAOC,KAAP,EAAmB;AACjB,UAAML,OAAO,GAAIK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeC,IAAjC,IAAyCF,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBP,OAA9D,IAA0EK,KAAK,CAACL,OAAhF,IAA2FK,KAAK,CAACG,QAAN,EAA3G;AACA,WAAOL,QAAQ,CAACM,eAAT,CAAyBT,OAAzB,CAAP;AACH;AACJ,CAPsC,CAAhC;AAUP,OAAO,MAAMU,SAAS,GAAGjB,WAAW,CAAC;AACjCkB,EAAAA,IAAI,EAAE,OAD2B;AAEjChB,EAAAA,YAFiC;AAGjCiB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAGC,KAAD,IAAWnB;AADZ,GAHuB;AAMjCoB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACahB,OAAO,CAACiB,OADrB,EAC+BJ,KAAD,IAAW;AACjCA,MAAAA,KAAK,CAACf,SAAN,GAAkB,IAAlB;AACH,KAHL,EAIKkB,OAJL,CAIahB,OAAO,CAACkB,SAJrB,EAIgC,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC3CN,MAAAA,KAAK,CAAClB,KAAN,GAAcwB,MAAM,CAACC,OAArB;AACAP,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACAe,MAAAA,KAAK,CAAChB,SAAN,GAAkB,IAAlB;AACH,KARL,EASKmB,OATL,CASahB,OAAO,CAACqB,QATrB,EAS+B,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC1CN,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACAe,MAAAA,KAAK,CAACjB,OAAN,GAAgB,IAAhB;AACAiB,MAAAA,KAAK,CAACd,OAAN,GAAgBoB,MAAM,CAACC,OAAvB;AACH,KAbL;AAcH;AArBgC,CAAD,CAA7B;AAwBP,OAAO,MAAM;AAAER,EAAAA;AAAF,IAAYH,SAAS,CAACa,OAA5B;AACP,eAAeb,SAAS,CAACc,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport blogService from './blogService'\n\nconst initialState: Input = {\n    blogs: [],\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: ''\n}\n\nexport const getBlog = createAsyncThunk('api/goals', async(_, thunkAPI) => {\n    try {\n        return await blogService.getBlogs()\n    } catch (error: any) {\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\n        return thunkAPI.rejectWithValue(message)\n    }\n})\n\n\nexport const blogSlice = createSlice({\n    name: 'blogs',\n    initialState,\n    reducers: {\n        reset: (state) => initialState\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(getBlog.pending, (state) => {\n                state.isLoading = true\n            })\n            .addCase(getBlog.fulfilled, (state, action) => {\n                state.blogs = action.payload\n                state.isLoading = false;\n                state.isSuccess = true;\n            })\n            .addCase(getBlog.rejected, (state, action) => {\n                state.isLoading = false;\n                state.isError = true;\n                state.message = action.payload;\n            })\n    }\n})\n\nexport const { reset } = blogSlice.actions\nexport default blogSlice.reducer"]},"metadata":{},"sourceType":"module"}