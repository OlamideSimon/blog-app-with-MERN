{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport commentService from './commentService';\nconst initialState = {\n  comments: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const getComment = createAsyncThunk('api/comments', async (id, thunkAPI) => {\n  try {\n    return await commentService.getComments(id);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const postComment = createAsyncThunk('api/comments/id', async (data, thunkAPI) => {\n  try {\n    const {\n      id,\n      body\n    } = data;\n    return await commentService.postComment(id, body);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const commentSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getComment.pending, state => {\n      state.isLoading = true;\n    }).addCase(getComment.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getComment.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.comments = action.payload;\n    }).addCase(postComment.pending, state => {\n      state.isLoading = true;\n    }).addCase(postComment.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(postComment.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.comments.push(action.payload);\n    });\n  }\n});","map":{"version":3,"sources":["/home/young-alpha/Documents/GitHub/saadatu-backend/frontend/src/features/comments/commentSlice.ts"],"names":["createAsyncThunk","createSlice","commentService","initialState","comments","isError","isSuccess","isLoading","message","getComment","id","thunkAPI","getComments","error","response","data","toString","rejectWithValue","postComment","body","commentSlice","name","reducers","extraReducers","builder","addCase","pending","state","rejected","action","payload","fulfilled","push"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { CommentState } from '../../utils/interface'\nimport commentService from './commentService'\n\nconst initialState: CommentState = {\n    comments: [],\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: ''\n}\n\nexport const getComment = createAsyncThunk('api/comments', async(id: any, thunkAPI) => {\n  try {\n      return await commentService.getComments(id)\n  } catch (error: any) {\n    const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\n    return thunkAPI.rejectWithValue(message)\n  }  \n})\n\nexport const postComment = createAsyncThunk('api/comments/id', async(data: any, thunkAPI) => {\n    try {\n        const { id, body } = data\n        return await commentService.postComment(id, body)\n    } catch (error: any) {\n      const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }  \n  })\n\nexport const commentSlice = createSlice({\n    name: 'comments',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(getComment.pending, (state) => {\n                state.isLoading = true\n            })\n            .addCase(getComment.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n            })\n            .addCase(getComment.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.comments = action.payload\n            })\n            .addCase(postComment.pending, (state) => {\n                state.isLoading = true\n            })\n            .addCase(postComment.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n            })\n            .addCase(postComment.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.comments.push(action.payload)\n            })\n    }\n})"]},"metadata":{},"sourceType":"module"}