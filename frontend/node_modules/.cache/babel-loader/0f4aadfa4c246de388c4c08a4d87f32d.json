{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport authService from './authService';\nconst user = JSON.parse(localStorage.getItem('user') || '');\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n}; // Register user\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // login\n\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // logout\n\nexport const logout = createAsyncThunk('auth/logout', async () => {\n  await authService.logout();\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isError = true;\n      state.isLoading = false;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/home/young-alpha/Documents/GitHub/saadatu-backend/frontend/src/features/auth/authSlice.ts"],"names":["createAsyncThunk","createSlice","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","login","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { AuthState } from '../../utils/interface'\nimport authService from './authService'\n\nconst user = JSON.parse(localStorage.getItem('user') || '')\n\nconst initialState: AuthState = {\n    user: user ? user : null,\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: ''\n}\n\n\n// Register user\nexport const register = createAsyncThunk('auth/register', async(user, thunkAPI) => {\n    try {\n        return await authService.register(user)\n    } catch (error: Error | any) {\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\n        return thunkAPI.rejectWithValue(message)\n    }\n})\n\n// login\nexport const login = createAsyncThunk('auth/login', async(user, thunkAPI) => {\n    try {\n        return await authService.login(user)\n    } catch (error: Error | any) {\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\n        return thunkAPI.rejectWithValue(message)\n    }\n})\n\n// logout\nexport const logout = createAsyncThunk('auth/logout', async () => {\n    await authService.logout()\n})\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        reset: (state) => {\n            state.isLoading = false;\n            state.isError = false;\n            state.isSuccess = false;\n            state.message = ''\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(register.pending, (state) => {\n                state.isLoading = true\n            })\n            .addCase(register.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.user = action.payload\n            })\n            .addCase(register.rejected, (state, action) => {\n                state.isError = true\n                state.isLoading = false\n                state.message = action.payload\n                state.user = null\n            })\n            .addCase(login.pending, (state) => {\n                state.isLoading = true\n            })\n            .addCase(login.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.user = action.payload\n            })\n            .addCase(login.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n                state.user = null\n            })\n            .addCase(logout.fulfilled, (state) => {\n                state.user = null\n            })\n    }\n})\n\nexport const { reset } = authSlice.actions\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}