{"ast":null,"code":"import * as React from \"react\";\nimport { getPathForRoute, useCurrentRouteId, useRouter, inferInitialRouteFromPath } from \"../router/index.js\";\nimport { parseFramerPageLink, PathVariablesContext } from \"./framerPageLink.js\";\nimport { preloadComponent } from \"../router/index.js\";\n\nfunction isInternalURL(href) {\n  if (href === undefined) return false;\n  if (href.startsWith(\"#\") || href.startsWith(\"/\") || href.startsWith(\".\")) return true;\n  return false;\n}\n\nfunction isValidURL(href, isInternal) {\n  try {\n    const url = new URL(href);\n    return Boolean(url.protocol); // in theory this should always be true, but just in case?\n  } catch {// Ignore thrown errors.\n  }\n\n  return isInternal;\n}\n\nexport function propsForLink(href) {\n  const isInternal = isInternalURL(href);\n  return {\n    href: isValidURL(href, isInternal) ? href : `https://${href}`,\n    target: isInternal ? undefined : \"_blank\",\n    rel: !isInternal ? \"noreferrer noopener\" : undefined\n  };\n}\n\nfunction propsForRoutePath(href, router, currentRouteId) {\n  const isInternal = isInternalURL(href);\n  if (!router.routes || !router.getRoute || !currentRouteId || !isInternal) return propsForLink(href);\n  const currentRoutePath = router.getRoute(currentRouteId)?.path;\n\n  try {\n    const [pathname, hash] = href.split(\"#\", 2);\n    const {\n      routeId,\n      pathVariables\n    } = inferInitialRouteFromPath(router.routes, pathname);\n    const route = router.getRoute(routeId, pathVariables);\n\n    if (route) {\n      preloadComponent(route.page); // Hash will be \"\" if there isn't one. Coerce that\n      // to undefined to satisfy the API.\n\n      const elementId = hash || undefined; // Make the link relative to the current path if we can.\n\n      const path = getPathForRoute(route, {\n        currentRoutePath,\n        elementId\n      });\n      return {\n        href: path,\n\n        onClick(event) {\n          event.preventDefault();\n          router.navigate?.(routeId, elementId, pathVariables);\n        }\n\n      };\n    }\n  } catch (e) {// Fall through, we could not match the path to a path defined in our\n    // routes. We will assume the href is an external link.\n  }\n\n  return propsForLink(href);\n}\n/** @public */\n\n\nexport const Link = React.forwardRef((_ref, forwardedRef) => {\n  let {\n    children,\n    href,\n    ...restProps\n  } = _ref;\n  const router = useRouter();\n  const currentRouteId = useCurrentRouteId();\n  const pathVariables = React.useContext(PathVariablesContext);\n  const props = React.useMemo(() => {\n    if (!href) return {};\n    const pageLink = parseFramerPageLink(href);\n\n    if (!pageLink) {\n      return propsForRoutePath(href, router, currentRouteId);\n    }\n\n    const currentRoute = currentRouteId ? router.getRoute?.(currentRouteId) : undefined;\n\n    if (pageLink.target) {\n      const routeId = pageLink.target;\n      const elementId = pageLink.element ?? undefined;\n      const route = router.getRoute?.(routeId, pathVariables);\n      if (route) preloadComponent(route.page);\n      return {\n        href: getPathForRoute(route, {\n          currentRoutePath: currentRoute?.path,\n          elementId,\n          pathVariables\n        }),\n\n        onClick(event) {\n          event.preventDefault();\n          router.navigate?.(routeId, elementId, pathVariables);\n        }\n\n      };\n    }\n\n    return {};\n  }, [currentRouteId, href, pathVariables, router]);\n  if (!children) return null;\n  const child = React.Children.only(children);\n  if (!React.isValidElement(child)) return null;\n  return React.cloneElement(child, { ...restProps,\n    ...props,\n    ref: forwardedRef\n  });\n});\n/** @public */\n\nexport function resolveLink(href, router, pathVariables) {\n  // Parsing framer page links means this function is stuck in library.\n  const pageLink = parseFramerPageLink(href);\n  if (!pageLink || !pageLink.target) return propsForLink(href).href;\n  if (!router.getRoute || !router.currentRouteId) return href;\n  const currentRoute = router.getRoute(router.currentRouteId);\n  const routeId = pageLink.target;\n  const elementId = pageLink.element ?? undefined;\n  const route = router.getRoute(routeId, pathVariables);\n  return getPathForRoute(route, {\n    currentRoutePath: currentRoute?.path,\n    elementId,\n    pathVariables,\n    relative: false\n  });\n}","map":{"version":3,"mappings":"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","names":["React","getPathForRoute","useCurrentRouteId","useRouter","inferInitialRouteFromPath","parseFramerPageLink","PathVariablesContext","preloadComponent","isInternalURL","href","undefined","startsWith","isValidURL","isInternal","url","URL","Boolean","protocol","propsForLink","target","rel","propsForRoutePath","router","currentRouteId","routes","getRoute","currentRoutePath","path","pathname","hash","split","routeId","pathVariables","route","page","elementId","onClick","event","preventDefault","navigate","e","Link","forwardRef","forwardedRef","children","restProps","useContext","props","useMemo","pageLink","currentRoute","element","child","Children","only","isValidElement","cloneElement","ref","resolveLink","relative"],"sources":["../../src/modules/Link.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}